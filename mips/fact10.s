    ########################################
    # @brief 階乗の再帰計算プログラム
    # @date  2016/06/26
    #
    # C言語における
    #     main()
    #     {
    #         printf("The factorial of 10 is %d\n", fact(10));
    #     }
    #     int fact(int n)
    #     {
    #         if (n < 1)
    #         return (1);
    #         else
    #         return (n * fact(n - 1));
    #     }
    # をMipsアセンブリ言語によって記述する
    ########################################

    .data
str:
    .asciiz "The factorial of 10 is "

    .text
    .globl main
main:
    subu   $sp, $sp, 32  # スタックフレームは32バイト長
    sw     $ra, 20($sp)  # 戻りアドレスを退避
    sw     $fp, 16($sp)  # 古いフレーム・ポインタを退避
    addiu  $fp, $sp, 28  # フレームポインタを設定

    li     $a0, 10       # レジスタ$a0に引数10を転送
    jal    fact          # fact(10)を呼び出す

    la     $a0, str      # $a0にフォーマット文字列のアドレスを転送
    move   $a1, $v0      # $a1にfactの戻り値を転送
    jal    printf        # printf関数を呼び出す

    lw     $ra, 20($sp)  # スタックから戻りアドレス$ra復元
    lw     $fp, 16($sp)  # スタックからフレームポインタ$fpを復元
    addiu  $sp, $sp, 32  # スタックフレームをポップ
    jr     $ra           # 呼び出し側へ戻る



################################################################################
# @brief 再帰的に階乗を計算する
# @param[in] n n!を計算する
# @return    n!
################################################################################
    .text
fact:
    subu   $sp, $sp, 32  # スタックフレームは32バイト長
    sw     $ra, 20($sp)  # 戻りアドレスを退避
    sw     $fp, 16($sp)  # フレームポインタを退避
    addiu  $fp, $sp, 28  # フレームポインタを設定
    sw     $a0, 0($fp)   # 引数nを退避

    lw     $v0, 0($fp)   # レジスタ$v0にnを転送
    bgtz   $v0, $L2      # n > 0の場合に分岐
    li     $v0, 1        # n <= 0のとき、1を返す
    j      $L1           # 基底末期化処理にジャンプ


$L2:
    lw     $v1, 0($fp)   # $v1にnを転送
    subu   $v0, $v1, 1   # $v0 := n - 1
    move   $a0, $v0      # レジスタ$a0にn - 1を転送
    jal    fact          # fact(n-1)を呼び出す

    lw     $v1, 0($fp)   # レジスタ$v1にnを転送
    mul    $v0, $v0, $v1 # $v0 := fact(n - 1) * n


$L1:                     # NOTE: 戻り値はすでに$v0に格納されている
    lw     $ra, 20($sp)  # 戻りアドレスを復元
    lw     $fp, 16($sp)  # フレームポインタを復元
    addiu  $sp, $sp, 32  # スタックフレームをポップ
    jr     $ra           # 呼び出し元に戻る



################################################################################
# @brief フォーマット文字列を印刷する
# @param[in] Format String
# @param[in] Integer
################################################################################
    .text
printf:
    subu   $sp, $sp, 32  # スタックフレームは32バイト長
    sw     $ra, 20($sp)  # 戻りアドレスを退避
    sw     $fp, 16($sp)  # フレームポインタを退避
    addiu  $fp, $sp, 28  # フレームポインタを設定

    li     $v0, 4        # 文字列を印字するために$v0に格納されている4を代入
    syscall              # $a0を印字
    
    move   $a0, $a1      # $a0に$a1を転送
    li     $v0, 1        # 整数を印字するために$v0に格納されている4を代入1を代入
    syscall              # $a0を印字

    lw     $ra, 20($sp)  # 戻りアドレスを復元
    lw     $fp, 16($sp)  # フレームポインタを復元
    addiu  $sp, $sp, 32  # スタックフレームをポップ

    jr     $ra           # 呼び出し元に戻る








