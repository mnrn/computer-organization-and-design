/**
 * @brief 南北及び東西に走る道路の交差点における信号機の制御を記す.
 * 
 *            単純化を図るために、赤信号と青信号だけを考慮する.
 *            各方向の信号が変わるサイクルは30秒より短くしたくはない.
 *            そこで、0.033Hzのクロックを使用して、状態が変化するサイクルが
 *            30秒を切らないように制御する.
 * 
 *            出力信号には下記の2つがある.
 * 
 *            ■ 南北点灯(NSLite) : この信号がアサートされていると、南北方向の道路の
 *                  信号機が青になる.ディアサートされていると、信号は赤になる
 *            ■ 東西点灯(EWLite) : この信号がアサートされていると、東西方向の道路の
 *                  信号機が青になる.ディアサートされていると、信号は赤になる
 * 
 *            入力には、下記の2つがある.
 * 
 *            ■ 南北車(NSCar) : 南北方向の道路の信号機の前の路面に設置された
 *                  検出板上に車が来ていることを示す.
 *            ■ 東西車(EWCar) : 東西方向の道路の信号機の前の路面に設置された
 *                  検出板上に車が来ていることを示す.
 * 
 *            信号機は信号待ちしている車がいるときにのみ変えるものとする.
 *            信号待ちしている車がいないときは, 信号は最後に車が通った時のままとする.
 *            この簡単な信号機システムを実装するには,下記の2つの状態が必要となる.
 * 
 *            ■ 南北青(NSGreen) : 南北方向の信号機が青である.
 *            ■ 東西青(EWGreen) : 東西方向の信号機が青である.
 * 
 *  @date 2016/01/05
 */



module TrafficLite (EWCar, NSCar, EWLite, NSLite, clock);
   input   EWCar, NSCar, clock;
   output EWLite, NSLite;

   reg 	  state;

   initial state = 0;           // 初期状態を設定

   // 2つの代入文に続いて、変数stateのみに基づいて出力を設定
   assign NSLite = ~state;      // 状態 = 0 の場合に南北点灯 
   assign EWLite = state;       // 状態 = 1 の場合に東西点灯

   always @(posedge clock)      // クロックの立ち上がりですべての状態を更新
   case (state)
     0: state = EWCar;          // 東西車の場合のみ状態変更
     1: state = NSCar;          // 南北車の場合のみ状態変更
   endcase // case (state)
endmodule // TrafficLite

     
